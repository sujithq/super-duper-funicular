name: Release and Publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string

permissions:
  contents: write

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'src/SolarScope.csproj'
  PACKAGE_OUTPUT_PATH: 'src/nupkg'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Test
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal
      continue-on-error: true

    - name: Pack
      run: dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ${{ env.PACKAGE_OUTPUT_PATH }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: ${{ env.PACKAGE_OUTPUT_PATH }}/*.nupkg

  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "package_version=$VERSION" >> $GITHUB_OUTPUT
        else
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "package_version=${VERSION#v}" >> $GITHUB_OUTPUT
        fi

    - name: Update project version
      run: |
        sed -i 's/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>${{ steps.version.outputs.package_version }}<\/PackageVersion>/' ${{ env.PROJECT_PATH }}
        
    - name: Update changelog
      run: |
        # Get the date
        DATE=$(date +%Y-%m-%d)
        
        # Replace [Unreleased] with version and date
        sed -i "s/## \[Unreleased\]/## [${{ steps.version.outputs.package_version }}] - $DATE/" CHANGELOG.md
        
        # Add new [Unreleased] section at the top
        sed -i "/## \[${{ steps.version.outputs.package_version }}\]/i\\## [Unreleased]\\n\\n### Added\\n\\n### Changed\\n\\n### Fixed\\n\\n### Removed\\n" CHANGELOG.md

    - name: Build and pack
      run: |
        dotnet restore ${{ env.PROJECT_PATH }}
        dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
        dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ${{ env.PACKAGE_OUTPUT_PATH }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: ${{ env.PACKAGE_OUTPUT_PATH }}

    - name: Generate release notes from changelog
      id: changelog
      run: |
        # Extract release notes from changelog
        awk '/## \[${{ steps.version.outputs.package_version }}\]/{flag=1; next} /## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: SolarScope CLI ${{ steps.version.outputs.version }}
        body: |
          ## üåû SolarScope CLI ${{ steps.version.outputs.version }}
          
          ### What's New
          ${{ steps.changelog.outputs.release_notes }}
          
          ### Installation
          ```bash
          dotnet tool install --global SolarScope --version ${{ steps.version.outputs.package_version }}
          ```
          
          ### Quick Start
          ```bash
          solarscope dashboard
          ```
          
          For complete documentation, see the [README](https://github.com/sujithq/super-duper-funicular#readme).
        draft: false
        prerelease: false

    - name: Upload NuGet package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.PACKAGE_OUTPUT_PATH }}/SolarScope.${{ steps.version.outputs.package_version }}.nupkg
        asset_name: SolarScope.${{ steps.version.outputs.package_version }}.nupkg
        asset_content_type: application/zip

    - name: Publish to NuGet.org
      run: |
        dotnet nuget push ${{ env.PACKAGE_OUTPUT_PATH }}/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      if: success() && !github.event.inputs.version

    - name: Commit changelog updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md ${{ env.PROJECT_PATH }}
        git commit -m "chore: update changelog and version for ${{ steps.version.outputs.version }}" || exit 0
        git push origin main
      if: success()

  validate-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Validate semantic version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?(\+[a-zA-Z0-9]+)?$ ]]; then
          echo "‚ùå Invalid semantic version: $VERSION"
          echo "Version must follow semver format: MAJOR.MINOR.PATCH[-prerelease][+build]"
          exit 1
        fi
        echo "‚úÖ Valid semantic version: $VERSION"
