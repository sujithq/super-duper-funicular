name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write
  issues: write
  repository-projects: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    if: needs.release-please.outputs.release_created
    needs: release-please
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore src/SolarScope.csproj

      - name: Update version in csproj
        run: |
          VERSION="${{ needs.release-please.outputs.version }}"
          sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>$VERSION<\/PackageVersion>/" src/SolarScope.csproj

      - name: Update version in README.md badge/link
        run: |
          VERSION="${{ needs.release-please.outputs.version }}"
          sed -i "s|/packages/SolarScope/[0-9.]*|/packages/SolarScope/$VERSION|g" README.md

      - name: Inject release notes into csproj
        run: |
          VERSION="${{ needs.release-please.outputs.version }}"

          # Use Python to safely inject release notes
          python3 << 'EOF'
          import re
          import sys

          version = "${{ needs.release-please.outputs.version }}"

          # Read CHANGELOG.md
          with open('CHANGELOG.md', 'r', encoding='utf-8') as f:
              changelog = f.read()

          # Extract release notes for this version
          pattern = rf'^## \[{re.escape(version)}\].*?(?=^## \[|\Z)'
          match = re.search(pattern, changelog, re.MULTILINE | re.DOTALL)
          
          if not match:
              print(f"No release notes found for version {version}")
              sys.exit(1)
              
          # Get content after the version header
          content = match.group(0)
          lines = content.split('\n')[2:]  # Skip version header and empty line
          
          # Remove empty lines at the end
          while lines and not lines[-1].strip():
              lines.pop()
              
          release_notes = '\n'.join(lines).strip()
          
          # Read csproj file
          with open('src/SolarScope.csproj', 'r', encoding='utf-8') as f:
              csproj = f.read()

          # Escape XML special characters
          escaped_notes = (release_notes
                          .replace('&', '&amp;')
                          .replace('<', '&lt;')
                          .replace('>', '&gt;'))

          # Replace or add PackageReleaseNotes
          if '<PackageReleaseNotes>' in csproj:
              # Replace existing content
              pattern = r'<PackageReleaseNotes>.*?</PackageReleaseNotes>'
              replacement = f'<PackageReleaseNotes>{escaped_notes}</PackageReleaseNotes>'
              csproj = re.sub(pattern, replacement, csproj, flags=re.DOTALL)
              print("Replaced existing PackageReleaseNotes")
          else:
              # Add after PackageReadmeFile
              pattern = r'(<PackageReadmeFile>.*?</PackageReadmeFile>)'
              replacement = rf'\1\n    <PackageReleaseNotes>{escaped_notes}</PackageReleaseNotes>'
              csproj = re.sub(pattern, replacement, csproj)
              print("Added new PackageReleaseNotes")

          # Write back the csproj file
          with open('src/SolarScope.csproj', 'w', encoding='utf-8') as f:
              f.write(csproj)

          print("Successfully updated csproj file")
          EOF

          # Save release notes for later use in NuGet push (for GitHub Actions output)
          python3 << 'EOF' >> $GITHUB_ENV
          import re

          version = "${{ needs.release-please.outputs.version }}"

          with open('CHANGELOG.md', 'r', encoding='utf-8') as f:
              changelog = f.read()

          pattern = rf'^## \[{re.escape(version)}\].*?(?=^## \[|\Z)'
          match = re.search(pattern, changelog, re.MULTILINE | re.DOTALL)
          content = match.group(0)
          lines = content.split('\n')[2:]
          while lines and not lines[-1].strip():
              lines.pop()
          raw_notes = '\n'.join(lines).strip()
          print(f"RELEASE_NOTES<<EOF")
          print(raw_notes)
          print("EOF")
          EOF

      - name: Commit and push version/badge/release notes updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add src/SolarScope.csproj README.md
          git commit -m "chore: update version, badge, and release notes [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: dotnet build src/SolarScope.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test src/SolarScope.csproj --configuration Release --no-build --verbosity normal
        continue-on-error: true  # Continue even if no tests are found

      - name: Pack
        run: dotnet pack src/SolarScope.csproj --configuration Release --no-build --output ./artifacts

      - name: Verify package metadata
        run: |
          echo "Verifying package contains release notes..."
          # Extract and display the PackageReleaseNotes from csproj to confirm they were added
          grep -A5 -B5 "PackageReleaseNotes" src/SolarScope.csproj || echo "No PackageReleaseNotes found in csproj"
          
          # List the generated package
          ls -la ./artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ./artifacts/*.nupkg

      - name: Publish to NuGet
        run: |
          echo "Publishing to NuGet with release notes:"
          echo "----------------------------------------"
          echo "$RELEASE_NOTES"
          echo "----------------------------------------"
          
          # Push to NuGet (release notes are embedded in the package via PackageReleaseNotes in csproj)
          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate \
            --timeout 300
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Upload packages to release
        run: |
          echo "Uploading packages to GitHub release..."
          echo "Release notes for this version:"
          echo "================================"
          echo "$RELEASE_NOTES"
          echo "================================"
          
          # Upload the NuGet package to the GitHub release
          gh release upload ${{ needs.release-please.outputs.tag_name }} ./artifacts/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
