name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create prerelease version'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'src/SolarScope.csproj'

jobs:
  bump-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(grep -o '<PackageVersion>.*</PackageVersion>' ${{ env.PROJECT_PATH }} | sed 's/<[^>]*>//g')
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT="${{ steps.current_version.outputs.version }}"
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case "${{ github.event.inputs.bump_type }}" in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        
        if [ "${{ github.event.inputs.prerelease }}" == "true" ]; then
          NEW_VERSION="$NEW_VERSION-alpha.$(date +%Y%m%d%H%M%S)"
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update project version
      run: |
        sed -i 's/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>${{ steps.new_version.outputs.version }}<\/PackageVersion>/' ${{ env.PROJECT_PATH }}
        echo "Updated project version to ${{ steps.new_version.outputs.version }}"

    - name: Update changelog
      if: github.event.inputs.prerelease == 'false'
      run: |
        DATE=$(date +%Y-%m-%d)
        
        # Add new version section to changelog
        sed -i "/## \[Unreleased\]/a\\\\n## [${{ steps.new_version.outputs.version }}] - $DATE\\n\\n### Added\\n- Version bump to ${{ steps.new_version.outputs.version }}\\n" CHANGELOG.md
        
        echo "Updated changelog for version ${{ steps.new_version.outputs.version }}"

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ${{ env.PROJECT_PATH }}
        if [ "${{ github.event.inputs.prerelease }}" == "false" ]; then
          git add CHANGELOG.md
        fi
        git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
        git push origin main

    - name: Create and push tag
      run: |
        git tag ${{ steps.new_version.outputs.tag }}
        git push origin ${{ steps.new_version.outputs.tag }}
        echo "Created and pushed tag: ${{ steps.new_version.outputs.tag }}"

    - name: Summary
      run: |
        echo "## ðŸš€ Version Bump Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version**: ${{ steps.current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version**: ${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type**: ${{ github.event.inputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Prerelease**: ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag**: ${{ steps.new_version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The release workflow will automatically trigger to publish this version." >> $GITHUB_STEP_SUMMARY
