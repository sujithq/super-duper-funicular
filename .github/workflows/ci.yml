name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'tapes/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'tapes/**'

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'src/SolarScope.csproj'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Test
      run: dotnet test ${{ env.PROJECT_PATH }} --configuration Release --no-build --verbosity normal
      continue-on-error: true

    - name: Test installation (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./nupkg
        dotnet tool install --global --add-source ./nupkg SolarScope
        solarscope --version
        dotnet tool uninstall --global SolarScope

    - name: Test installation (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./nupkg
        dotnet tool install --global --add-source ./nupkg SolarScope
        solarscope --version
        dotnet tool uninstall --global SolarScope

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Check formatting
      run: dotnet format ${{ env.PROJECT_PATH }} --verify-no-changes --verbosity diagnostic

    - name: Run security scan
      run: dotnet list ${{ env.PROJECT_PATH }} package --vulnerable --include-transitive
      continue-on-error: true

  validate-changelog:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check changelog updated
      run: |
        if git diff --name-only origin/main...HEAD | grep -q "CHANGELOG.md"; then
          echo "✅ Changelog updated"
        else
          echo "⚠️ Consider updating CHANGELOG.md for your changes"
        fi

  package:
    runs-on: ubuntu-latest
    needs: [build, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Create package
      run: |
        dotnet restore ${{ env.PROJECT_PATH }}
        dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
        dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./nupkg

    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-ci
        path: ./nupkg/*.nupkg
        retention-days: 7
